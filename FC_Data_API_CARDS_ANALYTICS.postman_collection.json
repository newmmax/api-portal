{
  "info": {
    "_postman_id": "fc-data-api-cards-collection",
    "name": "FC Data API - Cards Analytics",
    "description": "üéØ Collection COMPLETA da FC Data API com Cards Analytics implementados\n\n‚úÖ Funcionalidades:\n- Autentica√ß√£o JWT\n- Consultas FC Data (PostgreSQL)\n- Portal Queries (SQL Server)\n- üî• CARD 01: Recompra Inteligente\n- üî• CARD 02: Oportunidades na Rede\n\nüìä Cards Analytics:\n- Algoritmos de IA para sugest√µes\n- An√°lise comparativa vs rede\n- Insights personalizados\n- Prioriza√ß√£o autom√°tica",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "fc-data-api-cards",
    "version": "3.0.0"
  },
  "item": [
    {
      "name": "üè• Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "‚úÖ Verificar status da API\n\n- Status de conex√µes dos bancos\n- Vers√£o da API\n- Uptime do servidor\n- N√ÉO requer autentica√ß√£o"
      },
      "response": []
    },
    {
      "name": "üîê Autentica√ß√£o",
      "item": [
        {
          "name": "üö™ Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// ü§ñ AUTO-CAPTURA DO TOKEN JWT",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.token) {",
                  "        // Salvar token na collection e environment",
                  "        pm.collectionVariables.set('token', jsonData.token);",
                  "        pm.environment.set('token', jsonData.token);",
                  "        ",
                  "        console.log('üéâ TOKEN JWT CAPTURADO E SALVO!');",
                  "        console.log('üîë Token:', jsonData.token.substring(0, 50) + '...');",
                  "        console.log('‚è∞ Expira em:', jsonData.expires_in + ' segundos');",
                  "        console.log('‚úÖ Pronto para usar endpoints protegidos!');",
                  "    }",
                  "}",
                  "",
                  "// üß™ TESTES AUTOMATIZADOS",
                  "pm.test('‚úÖ Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('üîë Token received', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('expires_in');",
                  "    pm.expect(jsonData).to.have.property('token_type');",
                  "});",
                  "",
                  "pm.test('üîí Token is JWT format', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"ArtesanalFC2025!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "üîê **AUTENTICA√á√ÉO PRINCIPAL**\n\n**Credenciais padr√£o:**\n- Username: `admin`\n- Password: `ArtesanalFC2025!`\n\n**Response:**\n```json\n{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n  \"expires_in\": 86400,\n  \"token_type\": \"Bearer\"\n}\n```\n\n**Auto-Features:**\n- ‚úÖ Token capturado automaticamente\n- ‚úÖ Salvo em vari√°veis da collection\n- ‚úÖ Pronto para usar em outros endpoints"
          },
          "response": []
        },        {
          "name": "üîç Validar Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Token is valid', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('üìã Token info received', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.valid).to.be.true;",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('expires_at');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/validate",
              "host": ["{{base_url}}"],
              "path": ["auth", "validate"]
            },
            "description": "üîç **VALIDA√á√ÉO DE TOKEN**\n\n- Verifica se token JWT est√° v√°lido\n- Retorna informa√ß√µes do usu√°rio\n- Mostra data de expira√ß√£o\n- √ötil para debugging"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üéØ CARDS ANALYTICS",
      "item": [
        {
          "name": "üîÑ CARD 01: Recompra Inteligente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Card 01 response OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('üìä Has recompra data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('produtos_recompra');",
                  "    pm.expect(jsonData).to.have.property('algoritmo');",
                  "});",
                  "",
                  "pm.test('üéØ Products have score', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.produtos_recompra && jsonData.produtos_recompra.length > 0) {",
                  "        var produto = jsonData.produtos_recompra[0];",
                  "        pm.expect(produto).to.have.property('score_recompra');",
                  "        pm.expect(produto).to.have.property('nivel_prioridade');",
                  "        pm.expect(produto).to.have.property('sugestao_inteligente');",
                  "    }",
                  "});",
                  "",
                  "// üìä LOG DOS RESULTADOS",
                  "if (pm.response.code === 200) {",
                  "    var data = pm.response.json();",
                  "    console.log('üéØ CARD 01: Recompra Inteligente');",
                  "    console.log('üìà Total produtos:', data.total_produtos);",
                  "    console.log('üîç Per√≠odo:', data.periodo_dias + ' dias');",
                  "    console.log('üè¢ CNPJ:', data.cnpj);",
                  "    ",
                  "    if (data.produtos_recompra && data.produtos_recompra.length > 0) {",
                  "        console.log('üî• TOP 3 PRODUTOS:');",
                  "        data.produtos_recompra.slice(0, 3).forEach((p, i) => {",
                  "            console.log(`${i+1}. ${p.codigo_produto} - Score: ${p.score_recompra} (${p.nivel_prioridade})`);",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/recompra-inteligente?cnpj={{cnpj_teste}}&periodo_dias=180&limite=30",
              "host": ["{{base_url}}"],
              "path": ["analytics", "recompra-inteligente"],
              "query": [
                {
                  "key": "cnpj",
                  "value": "{{cnpj_teste}}",
                  "description": "CNPJ do franqueado (OBRIGAT√ìRIO)"
                },
                {
                  "key": "periodo_dias",
                  "value": "180",
                  "description": "Per√≠odo de an√°lise em dias (padr√£o: 90)"
                },
                {
                  "key": "limite",
                  "value": "30",
                  "description": "N√∫mero m√°ximo de produtos (padr√£o: 50)"
                }
              ]
            },
            "description": "üîÑ **CARD 01: RECOMPRA INTELIGENTE**\n\n**Algoritmo de IA para sugest√µes de recompra baseado em:**\n- üìä Frequ√™ncia de compras\n- ‚è∞ Tempo desde √∫ltima compra  \n- üéØ Score inteligente: `(frequ√™ncia * 10) / dias_ultima_compra`\n\n**Features:**\n- ‚úÖ Classifica√ß√£o ALTA/M√âDIA/BAIXA\n- ‚úÖ Produtos relacionados (cross-selling)\n- ‚úÖ Insights personalizados\n- ‚úÖ Mensagens UX prontas\n\n**Par√¢metros:**\n- `cnpj`: CNPJ do franqueado (obrigat√≥rio)\n- `periodo_dias`: Per√≠odo an√°lise (opcional, padr√£o: 90)\n- `limite`: Max produtos (opcional, padr√£o: 50)\n\n**Response inclui:**\n```json\n{\n  \"produtos_recompra\": [\n    {\n      \"codigo_produto\": \"PA000037\",\n      \"score_recompra\": 4.2,\n      \"nivel_prioridade\": \"ALTA\",\n      \"sugestao_inteligente\": \"Produto em reposi√ß√£o!\",\n      \"produtos_relacionados\": [...]\n    }\n  ]\n}\n```"
          },
          "response": []
        },        {
          "name": "üèÜ CARD 02: Oportunidades na Rede",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Card 02 response OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('üìä Has oportunidades data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('oportunidades');",
                  "    pm.expect(jsonData).to.have.property('algoritmo');",
                  "});",
                  "",
                  "pm.test('üéØ Opportunities have metrics', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.oportunidades && jsonData.oportunidades.length > 0) {",
                  "        var oport = jsonData.oportunidades[0];",
                  "        pm.expect(oport).to.have.property('seu_grupo');",
                  "        pm.expect(oport).to.have.property('diferenca_percentual');",
                  "        pm.expect(oport).to.have.property('oportunidade_reais');",
                  "        pm.expect(oport).to.have.property('nivel_prioridade');",
                  "        pm.expect(oport).to.have.property('recomendacao');",
                  "    }",
                  "});",
                  "",
                  "// üìä LOG DOS RESULTADOS",
                  "if (pm.response.code === 200) {",
                  "    var data = pm.response.json();",
                  "    console.log('üèÜ CARD 02: Oportunidades na Rede');",
                  "    console.log('üìà Total oportunidades:', data.total_oportunidades);",
                  "    console.log('üîç Per√≠odo:', data.periodo_dias + ' dias');",
                  "    console.log('üè¢ CNPJ:', data.cnpj);",
                  "    ",
                  "    if (data.oportunidades && data.oportunidades.length > 0) {",
                  "        console.log('üí∞ TOP 3 OPORTUNIDADES:');",
                  "        data.oportunidades.slice(0, 3).forEach((o, i) => {",
                  "            console.log(`${i+1}. ${o.codigo_produto} - R$ ${o.oportunidade_reais} (${o.nivel_prioridade})`);",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/oportunidades-rede?cnpj={{cnpj_teste}}&periodo_dias=90&limite=20",
              "host": ["{{base_url}}"],
              "path": ["analytics", "oportunidades-rede"],
              "query": [
                {
                  "key": "cnpj",
                  "value": "{{cnpj_teste}}",
                  "description": "CNPJ do franqueado (OBRIGAT√ìRIO)"
                },
                {
                  "key": "periodo_dias",
                  "value": "90",
                  "description": "Per√≠odo de compara√ß√£o em dias (padr√£o: 90)"
                },
                {
                  "key": "limite",
                  "value": "20",
                  "description": "N√∫mero m√°ximo de oportunidades (padr√£o: 50)"
                }
              ]
            },
            "description": "üèÜ **CARD 02: OPORTUNIDADES NA REDE**\n\n**Algoritmo de compara√ß√£o vs benchmark da rede:**\n- üèÖ Classifica√ß√£o ABC autom√°tica (NTILE)\n- üìä Compara√ß√£o com m√©dia do grupo ABC\n- üí∞ C√°lculo de potencial financeiro\n- üéØ Score de prioriza√ß√£o multi-fator\n\n**Features:**\n- ‚úÖ Grupos A/B/C autom√°ticos\n- ‚úÖ Benchmark vs m√©dia da rede\n- ‚úÖ Insights personalizados\n- ‚úÖ Recomenda√ß√µes de a√ß√£o\n- ‚úÖ Impacto financeiro estimado\n\n**Algoritmo de Score:**\n- 50% peso: diferen√ßa percentual vs m√©dia\n- 30% peso: impacto financeiro estimado\n- 20% peso: popularidade na rede\n\n**Response inclui:**\n```json\n{\n  \"oportunidades\": [\n    {\n      \"codigo_produto\": \"PA000025\",\n      \"seu_grupo\": \"A\",\n      \"diferenca_percentual\": -55.6,\n      \"oportunidade_reais\": 2400.00,\n      \"insight\": \"GRANDE OPORTUNIDADE: 55% abaixo!\",\n      \"recomendacao\": \"INCLUIR NO PR√ìXIMO PEDIDO\"\n    }\n  ]\n}\n```"
          },
          "response": []
        }
      ]
    },    {
      "name": "üîç Portal Queries",
      "item": [
        {
          "name": "üéØ Query Portal Din√¢mica",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"SELECT TOP 10 id, nome, cnpj, cidade FROM clientes WHERE deleted_at IS NULL ORDER BY created_at DESC\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/portal/query",
              "host": ["{{base_url}}"],
              "path": ["portal", "query"]
            },
            "description": "üéØ **QUERY DIN√ÇMICA DO PORTAL**\n\n- Executa SQL personalizado no Portal\n- Suporte completo a tipos SQL Server\n- Convers√£o autom√°tica para JSON\n\n**Exemplos seguros:**\n```sql\nSELECT TOP 10 nome, cnpj FROM clientes\nSELECT codigo, descricao FROM produtos WHERE status = 1\nSELECT COUNT(*) as total FROM pedidos WHERE created_at >= '2025-01-01'\n```"
          },
          "response": []
        },
        {
          "name": "üì¶ Produtos Portal",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/portal/produtos?grupo_venda=PREMIUM",
              "host": ["{{base_url}}"],
              "path": ["portal", "produtos"],
              "query": [
                {
                  "key": "grupo_venda",
                  "value": "PREMIUM",
                  "description": "Filtrar por grupo de venda"
                }
              ]
            },
            "description": "üì¶ **PRODUTOS DO PORTAL**\n\n- Lista produtos dispon√≠veis\n- Filtros por grupo de venda\n- Informa√ß√µes de estoque e pre√ßo"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìä Dados FC (PostgreSQL)",
      "item": [
        {
          "name": "üìà Vendas FC",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/data/vendas?data_inicio=2024-01-01&data_fim=2025-12-31&limite=50",
              "host": ["{{base_url}}"],
              "path": ["data", "vendas"],
              "query": [
                {
                  "key": "data_inicio",
                  "value": "2024-01-01",
                  "description": "Data inicial (YYYY-MM-DD)"
                },
                {
                  "key": "data_fim",
                  "value": "2025-12-31",
                  "description": "Data final (YYYY-MM-DD)"
                },
                {
                  "key": "limite",
                  "value": "50",
                  "description": "M√°ximo de registros"
                }
              ]
            },
            "description": "üìà **DADOS DE VENDAS FC**\n\n- Query √∫nica otimizada\n- Dados hist√≥ricos PostgreSQL\n- M√©tricas completas de vendas"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìã Exemplos Pr√°ticos",
      "item": [
        {
          "name": "üéØ Teste Completo Cards",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Definir CNPJ de teste",
                  "pm.collectionVariables.set('cnpj_teste', '17.311.174/0001-78');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üéØ EXECUTANDO TESTE COMPLETO DOS CARDS');",
                  "console.log('================================');",
                  "",
                  "// Executar Card 01",
                  "pm.sendRequest({",
                  "    url: pm.collectionVariables.get('base_url') + '/analytics/recompra-inteligente?cnpj=' + pm.collectionVariables.get('cnpj_teste') + '&periodo_dias=90&limite=10',",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.collectionVariables.get('token')",
                  "    }",
                  "}, function (err, response) {",
                  "    if (!err && response.code === 200) {",
                  "        var data = response.json();",
                  "        console.log('‚úÖ CARD 01 - Recompra Inteligente: OK');",
                  "        console.log('üìä Produtos encontrados:', data.total_produtos);",
                  "    } else {",
                  "        console.log('‚ùå CARD 01 - Erro:', err || response.status);",
                  "    }",
                  "});",
                  "",
                  "// Executar Card 02",
                  "setTimeout(() => {",
                  "    pm.sendRequest({",
                  "        url: pm.collectionVariables.get('base_url') + '/analytics/oportunidades-rede?cnpj=' + pm.collectionVariables.get('cnpj_teste') + '&periodo_dias=90&limite=10',",
                  "        method: 'GET',",
                  "        header: {",
                  "            'Authorization': 'Bearer ' + pm.collectionVariables.get('token')",
                  "        }",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            var data = response.json();",
                  "            console.log('‚úÖ CARD 02 - Oportunidades na Rede: OK');",
                  "            console.log('üí∞ Oportunidades encontradas:', data.total_oportunidades);",
                  "        } else {",
                  "            console.log('‚ùå CARD 02 - Erro:', err || response.status);",
                  "        }",
                  "        console.log('================================');",
                  "        console.log('üéâ TESTE COMPLETO FINALIZADO!');",
                  "    });",
                  "}, 1000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "üéØ **TESTE AUTOM√ÅTICO COMPLETO**\n\n- Executa todos os Cards automaticamente\n- Mostra resultados no console\n- Ideal para valida√ß√£o r√°pida"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// üöÄ PRE-REQUEST GLOBAL SCRIPT",
          "console.log('üîÑ Executando request:', pm.info.requestName);",
          "",
          "// Definir data atual se necess√°rio",
          "const now = new Date();",
          "const year = now.getFullYear();",
          "const month = String(now.getMonth() + 1).padStart(2, '0');",
          "const day = String(now.getDate()).padStart(2, '0');",
          "pm.collectionVariables.set('current_date', `${year}-${month}-${day}`);",
          "",
          "// Verificar token antes de requests protegidos",
          "const token = pm.collectionVariables.get('token') || pm.environment.get('token');",
          "if (!pm.request.url.path.includes('login') && ",
          "    !pm.request.url.path.includes('health')) {",
          "    if (!token) {",
          "        console.warn('‚ö†Ô∏è Token n√£o encontrado! Execute o LOGIN primeiro.');",
          "    } else {",
          "        console.log('‚úÖ Token JWT encontrado e ser√° usado.');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// üß™ POST-TEST GLOBAL SCRIPT",
          "",
          "// Log de resposta",
          "if (pm.response.code !== 200) {",
          "    console.error('‚ùå Erro:', pm.response.code, pm.response.status);",
          "    console.log('üìÑ Response:', pm.response.text());",
          "} else {",
          "    console.log('‚úÖ Sucesso:', pm.info.requestName);",
          "}",
          "",
          "// Verificar erros de autentica√ß√£o",
          "if (pm.response.code === 401) {",
          "    console.error('üîê ERRO DE AUTENTICA√á√ÉO!');",
          "    console.log('üí° Dica: Execute o endpoint de LOGIN novamente.');",
          "}"
        ]
      }
    }
  ],  "variable": [
    {
      "key": "protocol",
      "value": "http",
      "type": "string",
      "description": "Protocolo da API (http/https)"
    },
    {
      "key": "host",
      "value": "localhost",
      "type": "string",
      "description": "Host da API"
    },
    {
      "key": "port",
      "value": "8089",
      "type": "string",
      "description": "Porta da API"
    },
    {
      "key": "api_path",
      "value": "/services/api1",
      "type": "string",
      "description": "Caminho base da API"
    },
    {
      "key": "base_url",
      "value": "{{protocol}}://{{host}}:{{port}}{{api_path}}",
      "type": "string",
      "description": "URL completa da API"
    },
    {
      "key": "token",
      "value": "",
      "type": "string",
      "description": "Token JWT (preenchido automaticamente pelo login)"
    },
    {
      "key": "cnpj_teste",
      "value": "17.311.174/0001-78",
      "type": "string",
      "description": "CNPJ padr√£o para testes dos Cards"
    },
    {
      "key": "current_date",
      "value": "",
      "type": "string",
      "description": "Data atual (gerada automaticamente)"
    }
  ]
}